<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cluster/cluster_database.proto

namespace Typedb\Protocol\ClusterDatabaseManager\Get;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>typedb.protocol.ClusterDatabaseManager.Get.Res</code>
 */
class Res extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.typedb.protocol.ClusterDatabase database = 1;</code>
     */
    protected $database = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Typedb\Protocol\ClusterDatabase $database
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cluster\ClusterDatabase::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.ClusterDatabase database = 1;</code>
     * @return \Typedb\Protocol\ClusterDatabase|null
     */
    public function getDatabase()
    {
        return $this->database;
    }

    public function hasDatabase()
    {
        return isset($this->database);
    }

    public function clearDatabase()
    {
        unset($this->database);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.ClusterDatabase database = 1;</code>
     * @param \Typedb\Protocol\ClusterDatabase $var
     * @return $this
     */
    public function setDatabase($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\ClusterDatabase::class);
        $this->database = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Res::class, \Typedb\Protocol\ClusterDatabaseManager_Get_Res::class);

