<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common/concept.proto

namespace Typedb\Protocol\AttributeType;

use UnexpectedValueException;

/**
 * Protobuf type <code>typedb.protocol.AttributeType.ValueType</code>
 */
class ValueType
{
    /**
     * Generated from protobuf enum <code>OBJECT = 0;</code>
     */
    const OBJECT = 0;
    /**
     * Generated from protobuf enum <code>BOOLEAN = 1;</code>
     */
    const BOOLEAN = 1;
    /**
     * Generated from protobuf enum <code>LONG = 2;</code>
     */
    const LONG = 2;
    /**
     * Generated from protobuf enum <code>DOUBLE = 3;</code>
     */
    const DOUBLE = 3;
    /**
     * Generated from protobuf enum <code>STRING = 4;</code>
     */
    const STRING = 4;
    /**
     * Generated from protobuf enum <code>DATETIME = 5;</code>
     */
    const DATETIME = 5;

    private static $valueToName = [
        self::OBJECT => 'OBJECT',
        self::BOOLEAN => 'BOOLEAN',
        self::LONG => 'LONG',
        self::DOUBLE => 'DOUBLE',
        self::STRING => 'STRING',
        self::DATETIME => 'DATETIME',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ValueType::class, \Typedb\Protocol\AttributeType_ValueType::class);

