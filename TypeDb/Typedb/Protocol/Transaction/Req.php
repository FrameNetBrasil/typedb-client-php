<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common/transaction.proto

namespace Typedb\Protocol\Transaction;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>typedb.protocol.Transaction.Req</code>
 */
class Req extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>bytes req_id = 1;</code>
     */
    protected $req_id = '';
    /**
     * Generated from protobuf field <code>map<string, string> metadata = 2;</code>
     */
    private $metadata;
    protected $req;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $req_id
     *     @type array|\Google\Protobuf\Internal\MapField $metadata
     *     @type \Typedb\Protocol\Transaction\Open\Req $open_req
     *     @type \Typedb\Protocol\Transaction\Stream\Req $stream_req
     *     @type \Typedb\Protocol\Transaction\Commit\Req $commit_req
     *     @type \Typedb\Protocol\Transaction\Rollback\Req $rollback_req
     *     @type \Typedb\Protocol\QueryManager\Req $query_manager_req
     *     @type \Typedb\Protocol\ConceptManager\Req $concept_manager_req
     *     @type \Typedb\Protocol\LogicManager\Req $logic_manager_req
     *     @type \Typedb\Protocol\Rule\Req $rule_req
     *     @type \Typedb\Protocol\Type\Req $type_req
     *     @type \Typedb\Protocol\Thing\Req $thing_req
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Common\Transaction::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>bytes req_id = 1;</code>
     * @return string
     */
    public function getReqId()
    {
        return $this->req_id;
    }

    /**
     * Generated from protobuf field <code>bytes req_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setReqId($var)
    {
        GPBUtil::checkString($var, False);
        $this->req_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>map<string, string> metadata = 2;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Generated from protobuf field <code>map<string, string> metadata = 2;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setMetadata($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->metadata = $arr;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Transaction.Open.Req open_req = 3;</code>
     * @return \Typedb\Protocol\Transaction\Open\Req|null
     */
    public function getOpenReq()
    {
        return $this->readOneof(3);
    }

    public function hasOpenReq()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Transaction.Open.Req open_req = 3;</code>
     * @param \Typedb\Protocol\Transaction\Open\Req $var
     * @return $this
     */
    public function setOpenReq($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\Transaction\Open\Req::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Transaction.Stream.Req stream_req = 4;</code>
     * @return \Typedb\Protocol\Transaction\Stream\Req|null
     */
    public function getStreamReq()
    {
        return $this->readOneof(4);
    }

    public function hasStreamReq()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Transaction.Stream.Req stream_req = 4;</code>
     * @param \Typedb\Protocol\Transaction\Stream\Req $var
     * @return $this
     */
    public function setStreamReq($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\Transaction\Stream\Req::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Transaction.Commit.Req commit_req = 5;</code>
     * @return \Typedb\Protocol\Transaction\Commit\Req|null
     */
    public function getCommitReq()
    {
        return $this->readOneof(5);
    }

    public function hasCommitReq()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Transaction.Commit.Req commit_req = 5;</code>
     * @param \Typedb\Protocol\Transaction\Commit\Req $var
     * @return $this
     */
    public function setCommitReq($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\Transaction\Commit\Req::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Transaction.Rollback.Req rollback_req = 6;</code>
     * @return \Typedb\Protocol\Transaction\Rollback\Req|null
     */
    public function getRollbackReq()
    {
        return $this->readOneof(6);
    }

    public function hasRollbackReq()
    {
        return $this->hasOneof(6);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Transaction.Rollback.Req rollback_req = 6;</code>
     * @param \Typedb\Protocol\Transaction\Rollback\Req $var
     * @return $this
     */
    public function setRollbackReq($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\Transaction\Rollback\Req::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.QueryManager.Req query_manager_req = 7;</code>
     * @return \Typedb\Protocol\QueryManager\Req|null
     */
    public function getQueryManagerReq()
    {
        return $this->readOneof(7);
    }

    public function hasQueryManagerReq()
    {
        return $this->hasOneof(7);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.QueryManager.Req query_manager_req = 7;</code>
     * @param \Typedb\Protocol\QueryManager\Req $var
     * @return $this
     */
    public function setQueryManagerReq($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\QueryManager\Req::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.ConceptManager.Req concept_manager_req = 8;</code>
     * @return \Typedb\Protocol\ConceptManager\Req|null
     */
    public function getConceptManagerReq()
    {
        return $this->readOneof(8);
    }

    public function hasConceptManagerReq()
    {
        return $this->hasOneof(8);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.ConceptManager.Req concept_manager_req = 8;</code>
     * @param \Typedb\Protocol\ConceptManager\Req $var
     * @return $this
     */
    public function setConceptManagerReq($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\ConceptManager\Req::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.LogicManager.Req logic_manager_req = 9;</code>
     * @return \Typedb\Protocol\LogicManager\Req|null
     */
    public function getLogicManagerReq()
    {
        return $this->readOneof(9);
    }

    public function hasLogicManagerReq()
    {
        return $this->hasOneof(9);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.LogicManager.Req logic_manager_req = 9;</code>
     * @param \Typedb\Protocol\LogicManager\Req $var
     * @return $this
     */
    public function setLogicManagerReq($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\LogicManager\Req::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Rule.Req rule_req = 10;</code>
     * @return \Typedb\Protocol\Rule\Req|null
     */
    public function getRuleReq()
    {
        return $this->readOneof(10);
    }

    public function hasRuleReq()
    {
        return $this->hasOneof(10);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Rule.Req rule_req = 10;</code>
     * @param \Typedb\Protocol\Rule\Req $var
     * @return $this
     */
    public function setRuleReq($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\Rule\Req::class);
        $this->writeOneof(10, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Type.Req type_req = 11;</code>
     * @return \Typedb\Protocol\Type\Req|null
     */
    public function getTypeReq()
    {
        return $this->readOneof(11);
    }

    public function hasTypeReq()
    {
        return $this->hasOneof(11);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Type.Req type_req = 11;</code>
     * @param \Typedb\Protocol\Type\Req $var
     * @return $this
     */
    public function setTypeReq($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\Type\Req::class);
        $this->writeOneof(11, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Thing.Req thing_req = 12;</code>
     * @return \Typedb\Protocol\Thing\Req|null
     */
    public function getThingReq()
    {
        return $this->readOneof(12);
    }

    public function hasThingReq()
    {
        return $this->hasOneof(12);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Thing.Req thing_req = 12;</code>
     * @param \Typedb\Protocol\Thing\Req $var
     * @return $this
     */
    public function setThingReq($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\Thing\Req::class);
        $this->writeOneof(12, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getReq()
    {
        return $this->whichOneof("req");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Req::class, \Typedb\Protocol\Transaction_Req::class);

