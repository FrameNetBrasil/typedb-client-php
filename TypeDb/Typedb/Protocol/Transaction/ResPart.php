<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common/transaction.proto

namespace Typedb\Protocol\Transaction;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>typedb.protocol.Transaction.ResPart</code>
 */
class ResPart extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>bytes req_id = 1;</code>
     */
    protected $req_id = '';
    protected $res;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $req_id
     *     @type \Typedb\Protocol\Transaction\Stream\ResPart $stream_res_part
     *     @type \Typedb\Protocol\QueryManager\ResPart $query_manager_res_part
     *     @type \Typedb\Protocol\LogicManager\ResPart $logic_manager_res_part
     *     @type \Typedb\Protocol\Type\ResPart $type_res_part
     *     @type \Typedb\Protocol\Thing\ResPart $thing_res_part
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Common\Transaction::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>bytes req_id = 1;</code>
     * @return string
     */
    public function getReqId()
    {
        return $this->req_id;
    }

    /**
     * Generated from protobuf field <code>bytes req_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setReqId($var)
    {
        GPBUtil::checkString($var, False);
        $this->req_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Transaction.Stream.ResPart stream_res_part = 2;</code>
     * @return \Typedb\Protocol\Transaction\Stream\ResPart|null
     */
    public function getStreamResPart()
    {
        return $this->readOneof(2);
    }

    public function hasStreamResPart()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Transaction.Stream.ResPart stream_res_part = 2;</code>
     * @param \Typedb\Protocol\Transaction\Stream\ResPart $var
     * @return $this
     */
    public function setStreamResPart($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\Transaction\Stream\ResPart::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.QueryManager.ResPart query_manager_res_part = 3;</code>
     * @return \Typedb\Protocol\QueryManager\ResPart|null
     */
    public function getQueryManagerResPart()
    {
        return $this->readOneof(3);
    }

    public function hasQueryManagerResPart()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.QueryManager.ResPart query_manager_res_part = 3;</code>
     * @param \Typedb\Protocol\QueryManager\ResPart $var
     * @return $this
     */
    public function setQueryManagerResPart($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\QueryManager\ResPart::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.LogicManager.ResPart logic_manager_res_part = 4;</code>
     * @return \Typedb\Protocol\LogicManager\ResPart|null
     */
    public function getLogicManagerResPart()
    {
        return $this->readOneof(4);
    }

    public function hasLogicManagerResPart()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.LogicManager.ResPart logic_manager_res_part = 4;</code>
     * @param \Typedb\Protocol\LogicManager\ResPart $var
     * @return $this
     */
    public function setLogicManagerResPart($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\LogicManager\ResPart::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Type.ResPart type_res_part = 5;</code>
     * @return \Typedb\Protocol\Type\ResPart|null
     */
    public function getTypeResPart()
    {
        return $this->readOneof(5);
    }

    public function hasTypeResPart()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Type.ResPart type_res_part = 5;</code>
     * @param \Typedb\Protocol\Type\ResPart $var
     * @return $this
     */
    public function setTypeResPart($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\Type\ResPart::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Thing.ResPart thing_res_part = 6;</code>
     * @return \Typedb\Protocol\Thing\ResPart|null
     */
    public function getThingResPart()
    {
        return $this->readOneof(6);
    }

    public function hasThingResPart()
    {
        return $this->hasOneof(6);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Thing.ResPart thing_res_part = 6;</code>
     * @param \Typedb\Protocol\Thing\ResPart $var
     * @return $this
     */
    public function setThingResPart($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\Thing\ResPart::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getRes()
    {
        return $this->whichOneof("res");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ResPart::class, \Typedb\Protocol\Transaction_ResPart::class);

