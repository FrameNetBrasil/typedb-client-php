<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common/options.proto

namespace Typedb\Protocol;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>typedb.protocol.Options</code>
 */
class Options extends \Google\Protobuf\Internal\Message
{
    protected $infer_opt;
    protected $trace_inference_opt;
    protected $explain_opt;
    protected $parallel_opt;
    protected $prefetch_size_opt;
    protected $prefetch_opt;
    protected $session_idle_timeout_opt;
    protected $transaction_timeout_opt;
    protected $schema_lock_acquire_timeout_opt;
    protected $read_any_replica_opt;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $infer
     *     @type bool $trace_inference
     *     @type bool $explain
     *     @type bool $parallel
     *     @type int $prefetch_size
     *     @type bool $prefetch
     *     @type int $session_idle_timeout_millis
     *     @type int $transaction_timeout_millis
     *     @type int $schema_lock_acquire_timeout_millis
     *     @type bool $read_any_replica
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Common\Options::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>bool infer = 1;</code>
     * @return bool
     */
    public function getInfer()
    {
        return $this->readOneof(1);
    }

    public function hasInfer()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>bool infer = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setInfer($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool trace_inference = 2;</code>
     * @return bool
     */
    public function getTraceInference()
    {
        return $this->readOneof(2);
    }

    public function hasTraceInference()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>bool trace_inference = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setTraceInference($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool explain = 3;</code>
     * @return bool
     */
    public function getExplain()
    {
        return $this->readOneof(3);
    }

    public function hasExplain()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>bool explain = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setExplain($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool parallel = 4;</code>
     * @return bool
     */
    public function getParallel()
    {
        return $this->readOneof(4);
    }

    public function hasParallel()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>bool parallel = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setParallel($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>int32 prefetch_size = 5;</code>
     * @return int
     */
    public function getPrefetchSize()
    {
        return $this->readOneof(5);
    }

    public function hasPrefetchSize()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>int32 prefetch_size = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setPrefetchSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool prefetch = 6;</code>
     * @return bool
     */
    public function getPrefetch()
    {
        return $this->readOneof(6);
    }

    public function hasPrefetch()
    {
        return $this->hasOneof(6);
    }

    /**
     * Generated from protobuf field <code>bool prefetch = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setPrefetch($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>int32 session_idle_timeout_millis = 7;</code>
     * @return int
     */
    public function getSessionIdleTimeoutMillis()
    {
        return $this->readOneof(7);
    }

    public function hasSessionIdleTimeoutMillis()
    {
        return $this->hasOneof(7);
    }

    /**
     * Generated from protobuf field <code>int32 session_idle_timeout_millis = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setSessionIdleTimeoutMillis($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>int32 transaction_timeout_millis = 8;</code>
     * @return int
     */
    public function getTransactionTimeoutMillis()
    {
        return $this->readOneof(8);
    }

    public function hasTransactionTimeoutMillis()
    {
        return $this->hasOneof(8);
    }

    /**
     * Generated from protobuf field <code>int32 transaction_timeout_millis = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setTransactionTimeoutMillis($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>int32 schema_lock_acquire_timeout_millis = 9;</code>
     * @return int
     */
    public function getSchemaLockAcquireTimeoutMillis()
    {
        return $this->readOneof(9);
    }

    public function hasSchemaLockAcquireTimeoutMillis()
    {
        return $this->hasOneof(9);
    }

    /**
     * Generated from protobuf field <code>int32 schema_lock_acquire_timeout_millis = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setSchemaLockAcquireTimeoutMillis($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool read_any_replica = 10;</code>
     * @return bool
     */
    public function getReadAnyReplica()
    {
        return $this->readOneof(10);
    }

    public function hasReadAnyReplica()
    {
        return $this->hasOneof(10);
    }

    /**
     * Generated from protobuf field <code>bool read_any_replica = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setReadAnyReplica($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(10, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getInferOpt()
    {
        return $this->whichOneof("infer_opt");
    }

    /**
     * @return string
     */
    public function getTraceInferenceOpt()
    {
        return $this->whichOneof("trace_inference_opt");
    }

    /**
     * @return string
     */
    public function getExplainOpt()
    {
        return $this->whichOneof("explain_opt");
    }

    /**
     * @return string
     */
    public function getParallelOpt()
    {
        return $this->whichOneof("parallel_opt");
    }

    /**
     * @return string
     */
    public function getPrefetchSizeOpt()
    {
        return $this->whichOneof("prefetch_size_opt");
    }

    /**
     * @return string
     */
    public function getPrefetchOpt()
    {
        return $this->whichOneof("prefetch_opt");
    }

    /**
     * @return string
     */
    public function getSessionIdleTimeoutOpt()
    {
        return $this->whichOneof("session_idle_timeout_opt");
    }

    /**
     * @return string
     */
    public function getTransactionTimeoutOpt()
    {
        return $this->whichOneof("transaction_timeout_opt");
    }

    /**
     * @return string
     */
    public function getSchemaLockAcquireTimeoutOpt()
    {
        return $this->whichOneof("schema_lock_acquire_timeout_opt");
    }

    /**
     * @return string
     */
    public function getReadAnyReplicaOpt()
    {
        return $this->whichOneof("read_any_replica_opt");
    }

}

