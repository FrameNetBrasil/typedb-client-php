<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common/concept.proto

namespace Typedb\Protocol;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>typedb.protocol.Concept</code>
 */
class Concept extends \Google\Protobuf\Internal\Message
{
    protected $concept;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Typedb\Protocol\Thing $thing
     *     @type \Typedb\Protocol\Type $type
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Common\Concept::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Thing thing = 1;</code>
     * @return \Typedb\Protocol\Thing|null
     */
    public function getThing()
    {
        return $this->readOneof(1);
    }

    public function hasThing()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Thing thing = 1;</code>
     * @param \Typedb\Protocol\Thing $var
     * @return $this
     */
    public function setThing($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\Thing::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Type type = 2;</code>
     * @return \Typedb\Protocol\Type|null
     */
    public function getType()
    {
        return $this->readOneof(2);
    }

    public function hasType()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.typedb.protocol.Type type = 2;</code>
     * @param \Typedb\Protocol\Type $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkMessage($var, \Typedb\Protocol\Type::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getConcept()
    {
        return $this->whichOneof("concept");
    }

}

